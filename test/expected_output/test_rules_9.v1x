#<assembly>
#<transfer default="chunk">
jmp section_rules_start
#<def-macro npar="1" n="firstWord">
macro_firstWord_start:
macro_firstWord_end: ret
#<def-macro npar="2" n="f_concord2">
macro_f_concord2_start:
macro_f_concord2_end: ret
#<def-macro npar="3" n="f_concord3">
macro_f_concord3_start:
macro_f_concord3_end: ret
#<section-rules>
section_rules_start:
patterns_start:
push "all<predet><sp>"
push "<adj>|<adj><*>|<adj><sint>|<adj><sint><*>|<adj><comp>|<adj><sup>"
push "all<predet><sp>"
push 3
addtrie action_0_start
patterns_end:
action_0_start:
#<call-macro n="firstWord">
push 1
push 1
call firstWord
#<call-macro n="f_concord2">
push 2
push 1
push 2
call f_concord2
#<call-macro n="f_concord3">
push 2
push 3
push 1
push 3
call f_concord3
#<chunk name="det_det_nom">
push "det_det_nom"
#<lit-tag v="SN">
push "<SN>"
#<lit v="el">
push "el"
#<lit-tag v="det.def">
push "<det><def>"
lu 2
chunk 3
out 1
action_0_end:
section_rules_end:
