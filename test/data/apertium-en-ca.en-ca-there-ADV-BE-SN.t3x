<?xml version="1.0" encoding="UTF-8"?> <!-- -*- nxml -*- -->
<postchunk>

  <section-def-cats>
    <def-cat n="hi">
      <cat-item name="hi"/>
    </def-cat>

    <def-cat n="SN_2words3">
      <cat-item name="num_nom"/><!-- 2 words-->
      <cat-item name="det_nom"/><!-- 2 words. els chunks det_nom en què el det és un ordinal (first house) també poden arribar com a PDET i per tant caldrà afegir-los també un determinant -->
      <cat-item name="nom_adj"/><!-- 2, maybe 3 -->
    </def-cat>

    <def-cat n="pottenirpronom">
      <cat-item name="verbcj"/>
      <cat-item name="verbcj_perif"/>
      <cat-item name="pro_verbcj"/>
      <cat-item name="pro_verbcj_perif"/>
      <cat-item name="auxmod_inf"/>
      <cat-item name="mod_inf"/>
    <!--  <cat-item name="have_pp"/> ho posarem a part com a prova-->
   <!--   <cat-item name="be_ger"/> -->
      <cat-item name="auxmod_mod_inf"/>
      <cat-item name="auxmod_have_pp"/>
      <cat-item name="mod_inf_perif"/>
      <cat-item name="pro_be_ger"/>
      <cat-item name="pro_auxmod_inf"/>
      <cat-item name="pro_mod_inf"/>
      <cat-item name="pro_have_pp"/>
      <cat-item name="pro_do_inf"/> 
      <cat-item name="pro_mod_inf_perif"/>
      <cat-item name="pro_auxmod_mod_inf"/>
      <cat-item name="pro_auxmod_have_pp"/>
      <cat-item name="going_to_inf"/>
      <cat-item name="pro_going_to_inf"/>
    </def-cat>   
  </section-def-cats>

  <section-def-attrs>
    <def-attr n="a_SN">
      <attr-item tags="DET"/>
      <attr-item tags="UNDET"/>
      <attr-item tags="NUM"/>
      <attr-item tags="PDET"/><!--'Per determinar', per a SN UNDET que han de passar a determinats, transformació que farà el postchunk detectant els PDET. -->
    </def-attr>

    <def-attr n="a_nom">
      <attr-item tags="n"/>
      <attr-item tags="np"/> 
      <attr-item tags="n.acr"/> 
    </def-attr>

    <def-attr n="gen">
      <attr-item tags="m"/>
      <attr-item tags="f"/>
      <attr-item tags="mf"/>
      <attr-item tags="GD"/>
      <attr-item tags="nt"/>
    </def-attr>

    <def-attr n="nbr">
      <attr-item tags="sg"/>
      <attr-item tags="pl"/>
      <attr-item tags="sp"/>
      <attr-item tags="ND"/>
    </def-attr>

    <def-attr n="a_prnpro">
      <attr-item tags="prn.pro"/>
      <attr-item tags="prn.pro.ref"/>
    </def-attr>

    <def-attr n="a_prnenc">
      <attr-item tags="prn.enc"/>
      <attr-item tags="prn.enc.ref"/>
    </def-attr>

    <def-attr n="a_prn">
      <attr-item tags="prn.pro"/>
      <attr-item tags="prn.pro.ref"/>
      <attr-item tags="prn.enc"/>
      <attr-item tags="prn.enc.ref"/>
    </def-attr>

    <def-attr n="tipus_verb">
      <attr-item tags="SV.pron"/>
      <attr-item tags="SV"/>
    </def-attr>

    <def-attr n="a_verb">
      <attr-item tags="vblex"/>	  
      <attr-item tags="vblex.pron"/>
      <attr-item tags="vbhaver"/>
      <attr-item tags="vbser"/>
      <attr-item tags="vbmod"/>
      <attr-item tags="HAVER"/>
    </def-attr>

    <def-attr n="pers">
      <attr-item tags="p1"/>
      <attr-item tags="p2"/>
      <attr-item tags="p3"/>
      <attr-item tags="PD"/>
    </def-attr>
  </section-def-attrs>

  <section-def-vars>
    <def-var n="paraula"/>
    <def-var n="genero"/>
    <def-var n="numero"/>
  </section-def-vars>

  <section-def-macros>
    <def-macro n="gen_nbr_determinante" npar="1">
      <choose>
	<when>
	  <test>
	    <not>
	      <equal>
		<clip pos="1" part="gen"/>
		<lit-tag v="mf"/>
	      </equal>
	    </not>
	  </test>
	  <let>
	    <var n="genero"/>
	    <clip pos="1" part="gen"/>
	  </let>
	</when>
	<otherwise>
	  <let>
	    <var n="genero"/>
	    <lit-tag v="m"/>
	  </let>
	</otherwise>
      </choose>
      <choose>
	<when>
	  <test>
	    <not>
	      <equal>
		<clip pos="1" part="nbr"/>
		<lit-tag v="sp"/>
	      </equal>
	    </not>
	  </test>
	  <let>
	    <var n="numero"/>
	    <clip pos="1" part="nbr"/>
	  </let>
	</when>
	<otherwise>
	  <let>
	    <var n="numero"/>
	    <lit-tag v="sg"/>
	  </let>
	</otherwise>
      </choose>
    </def-macro>
  </section-def-macros>

  <section-rules>
    <rule comment="CHUNK: HI">
      <pattern>
	<pattern-item n="hi"/>
      </pattern>
      <action>
	<let>
	  <clip pos="1" part="lem"/>
	  <get-case-from pos="0">
	    <lit v="hi"/>
	  </get-case-from>
	</let>
	<let>
	  <clip pos="1" part="tags"/>
	  <lit-tag v="prn.pro.adv"/>
	</let>
	<out>
	  <lu>
	    <clip pos="1" part="whole"/>
	  </lu>
	</out>
      </action>
    </rule>

    <rule comment="CHUNK: SN_2words3">
      <pattern>
	<pattern-item n="SN_2words3"/>
      </pattern>
      <action>
	<call-macro n="gen_nbr_determinante">
	  <with-param pos="0"/>
	</call-macro>
	<choose>
	  <when>
	    <test>
	      <and>
	      <equal>
		<clip pos="0" part="a_SN"/>
		<lit-tag v="PDET"/>
	      </equal>
		<not>
		  <equal>
		    <clip pos="1" part="a_nom"/>
		    <lit-tag v="np"/>
		  </equal>
		</not>
		<not>
		  <equal>
		    <clip pos="1" part="a_nom"/>
		    <lit-tag v="n.acr"/>
		  </equal>
		</not>
	      </and>
	    </test>
	    <out>
	      <lu>
		<get-case-from pos="0">
		  <lit v="el"/>
		</get-case-from>
		<lit-tag v="det.def"/>
		<var n="genero"/>
		<var n="numero"/>
	      </lu>
	      <b/>
	    </out>
	      <modify-case>
		<clip pos="1" part="lem"/>
		<lit v="aa"/>
	      </modify-case>
	  </when>
	</choose>	 
	<out>
	  <lu>
	    <clip pos="1" part="whole"/>
	  </lu>
	  <b pos="1"/>
	  <lu>
	    <clip pos="2" part="whole"/>
	  </lu>
	</out> 
	<choose> <!-- si s'ha afegit l'adverbi 'més' davant adj, cal enviar una posició més -->
	  <when>
	    <test>
	      <equal>
		<lu-count/>
		<lit v="3"/>
	      </equal>
	    </test>
	    <out>
	      <b pos="2"/>
	      <lu>
		<clip pos="3" part="whole"/>
	      </lu>
	    </out> 
	  </when>
	</choose> 
      </action>
    </rule> 

    <rule comment="arregla el pron reflexiu de tercera persona, quan és proclític">
      <pattern>
	<pattern-item n="pottenirpronom"/>
      </pattern>
      <action>
	<choose>
	  <when>
	    <test>
	      <equal>
		<clip pos="0" part="tipus_verb"/>
		<lit-tag v="SV.pron"/>
	      </equal>
	    </test>
	    <choose>
	      <when>
		<test>
		  <equal>
		    <clip pos="0" part="pers"/>
		    <lit-tag v="p3"/>
		  </equal>
		</test> 
		<let>
		  <clip pos="1" part="lem"/>
		  <lit v="es"/>
		</let>  
		<let>
		  <clip pos="1" part="a_prnpro"/>
		  <lit-tag v="prn.pro.ref"/>
		</let>
		<let>
		  <clip pos="1" part="nbr"/>
		  <lit-tag v="sp"/>
		</let> 
	      </when>
	    </choose>
	    <out>
	      <lu>
		<clip pos="1" part="whole"/>
	      </lu>
	      <b pos="1"/>
	      <lu>
		<clip pos="2" part="whole"/>
	      </lu>
	    </out>
	    <choose>
	      <when>
		<test>
		  <or>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="verbcj_perif"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="pro_verbcj"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="auxmod_inf"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="mod_inf"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="have_pp"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="be_ger"/>
		    </equal>
		  </or>
		</test>
		<out>
		  <b pos="2"/> 
		  <lu>
		    <clip pos="3" part="whole"/>
		  </lu>
		</out>
	      </when>
	    </choose>
	    <choose>
	      <when>
		<test>
		  <or>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="pro_verbcj_perif"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="auxmod_mod_inf"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="auxmod_have_pp"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="mod_inf_perif"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="going_to_inf"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="pro_be_ger"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="pro_auxmod_inf"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="pro_mod_inf"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="pro_have_pp"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="pro_do_inf"/>
		    </equal>
		  </or>
		</test>
		<out>
		  <b pos="2"/> 
		  <lu>
		    <clip pos="3" part="whole"/>
		  </lu>
		  <b pos="3"/> 
		  <lu>
		    <clip pos="4" part="whole"/>
		  </lu>
		</out>
	      </when>
	    </choose>
	    <choose>
	      <when>
		<test>
		  <or>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="pro_mod_inf_perif"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="pro_auxmod_mod_inf"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="pro_auxmod_have_pp"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="pro_going_to_inf"/>
		    </equal>
		  </or>
		</test>
		<out>
		  <b pos="2"/> 
		  <lu>
		    <clip pos="3" part="whole"/>
		  </lu>
		  <b pos="3"/> 
		  <lu>
		    <clip pos="4" part="whole"/>
		  </lu>
		  <b pos="4"/> 
		  <lu>
		    <clip pos="5" part="whole"/>
		  </lu>
		</out>
	      </when>
	    </choose>
	  </when>
	  <otherwise>
	    <choose><!--Mira si hi ha algun verb que sigui HAVER (d'haver-hi), en tal cas cal canviar lemes i etiquetes del verb principal ('ser' passa a 'haver') -->		   
	      <when>
		<test>
		  <equal>
		    <clip pos="0" part="a_verb"/>
		    <lit-tag v="HAVER"/>
		  </equal>
		</test>
		<choose>
		  <when>
		    <test>
		      <equal caseless="yes">
			<clip pos="0" part="lem"/>
			<lit v="verbcj"/>
		      </equal>
		    </test>
		    <let>
		      <clip pos="1" part="lem"/>
		      <lit v="haver"/>
		    </let>
		    <let>
		      <clip pos="1" part="a_verb"/>
		      <lit-tag v="vbhaver"/>
		    </let>	
		  </when>
		  <when>
		    <test>
		      <or>
			<equal caseless="yes">
			  <clip pos="0" part="lem"/>
			  <lit v="auxmod_inf"/>
			</equal>
			<equal caseless="yes">
			  <clip pos="0" part="lem"/>
			  <lit v="mod_inf"/>
			</equal>
			<equal caseless="yes">
			  <clip pos="0" part="lem"/>
			  <lit v="have_pp"/>
			</equal>
			<equal caseless="yes">
			  <clip pos="0" part="lem"/>
			  <lit v="verbcj_perif"/>
			</equal>
		      </or>
		    </test>
		    <let>
		      <clip pos="2" part="lem"/>
		      <lit v="haver"/>
		    </let>
		    <let>
		      <clip pos="2" part="a_verb"/>
		      <lit-tag v="vbhaver"/>
		    </let>
		  </when>
		  <when>
		    <test>
		      <or>
			<equal caseless="yes">
			  <clip pos="0" part="lem"/>
			  <lit v="auxmod_mod_inf"/>
			</equal>
			<equal caseless="yes">
			  <clip pos="0" part="lem"/>
			  <lit v="auxmod_have_pp"/>
			</equal>
			<equal caseless="yes">
			  <clip pos="0" part="lem"/>
			  <lit v="mod_inf_perif"/>
			</equal>
		      </or>
		    </test>
		    <let>
		      <clip pos="3" part="lem"/>
		      <lit v="haver"/>
		    </let>
		    <let>
		      <clip pos="3" part="a_verb"/>
		      <lit-tag v="vbhaver"/>
		    </let>
		  </when>
		</choose>
	      </when>
	    </choose>
	    
	    <out><!--I ara imprimeix el resultat de tot -->
	      <lu>
		<clip pos="1" part="whole"/>
	      </lu>
	    </out>
	    <choose>
	      <when>
		<test>
		  <or>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="verbcj_perif"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="pro_verbcj"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="auxmod_inf"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="mod_inf"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="have_pp"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="be_ger"/>
		    </equal>
		  </or>
		</test>
		<out>
		  <b pos="1"/> 
		  <lu>
		    <clip pos="2" part="whole"/>
		  </lu>
		</out>
	      </when>
	    </choose>
	    <choose>
	      <when>
		<test>
		  <or>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="pro_verbcj_perif"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="auxmod_mod_inf"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="auxmod_have_pp"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="mod_inf_perif"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="pro_be_ger"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="pro_auxmod_inf"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="pro_mod_inf"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="pro_have_pp"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="pro_be_ger"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="pro_do_inf"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="going_to_inf"/>
		    </equal>
		  </or>
		</test>
		<out>
		  <b pos="1"/> 
		  <lu>
		    <clip pos="2" part="whole"/>
		  </lu>
		  <b pos="2"/> 
		  <lu>
		    <clip pos="3" part="whole"/>
		  </lu>
		</out>
	      </when>
	    </choose>
	    <choose>
	      <when>
		<test>
		  <or>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="pro_mod_inf_perif"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="pro_auxmod_mod_inf"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="pro_auxmod_have_pp"/>
		    </equal>
		    <equal caseless="yes">
		      <clip pos="0" part="lem"/>
		      <lit v="pro_going_to_inf"/>
		    </equal>
		  </or>
		</test>
		<out>
		  <b pos="1"/> 
		  <lu>
		    <clip pos="2" part="whole"/>
		  </lu>
		  <b pos="2"/> 
		  <lu>
		    <clip pos="3" part="whole"/>
		  </lu>
		  <b pos="3"/> 
		  <lu>
		    <clip pos="4" part="whole"/>
		  </lu>
		</out>
	      </when>
	    </choose>
	  </otherwise>
	</choose>
      </action>
    </rule> 
  </section-rules>

</postchunk>

