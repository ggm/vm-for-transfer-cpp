#!/bin/bash

# TODO Refactor so we can use test indication in rm / gen.
# TODO Implement test skipping.
# TODO Implement test tags (for instance small, medium, big).
# TODO Implement test selection based on tags (run all small tests).
# TODO Add clean action to clean the tests (remove everything other than pretransfer and expected).

readonly TESTFILES_DIR="_testfiles"
readonly CONFIG_FILE="config.sh"
readonly USE_COLORS=1
readonly VALGRIND_MEMCHECK_OUT="memcheck.xml"
readonly VALGRIND_CALLGRIND_OUT="callgrind.out"

JUST_LIST_TESTS_COMBINATIONS=0
VALGRIND_PREFIX=""
VALGRIND_OUT=""
VALIDATE_TEST_FN=""

# Sets the variable ${LANG_PAIR_DIRS}, one directory per line.
function find_lang_pairs() {
  find ${TESTFILES_DIR} -mindepth 1 -maxdepth 1 -type d | sort
}

function load_lang_pair_config() {
  local LANG_PAIR_CONFIG="${1}"
  source "${LANG_PAIR_CONFIG}"
}

function find_lang_pair_txt_files() {
  local LANG_PAIR_DIR="${1}"
  local LANG_PAIR_TESTDATA_DIR="${LANG_PAIR_DIR}/test_data"

  find ${LANG_PAIR_TESTDATA_DIR} -mindepth 1 -maxdepth 1 -type f | sort
}

function create_empty_dir() {
  if [ -d "${1}" ]; then
    rm -rf "${1}"
  fi
  mkdir "${1}"
}

function find_all_stages() {
  local LANG_PAIR_DIR="${1}"
  local CODE_DIR="${LANG_PAIR_DIR}/code"
  find "${CODE_DIR}" -mindepth 1 -maxdepth 1 -type d | sort
}

function build_tests_for_all_stages() {
  local LANG_PAIR_DIR="${1}"
  local CURRENT_TEST_DIR="${2}"
  local TEXTFILE_PATH="${3}"

  local LANG_DATA_DIR="${LANG_PAIR_DIR}/lang_data"

  find_all_stages "${LANG_PAIR_DIR}" |\
  while read STAGE_DIR; do
    local STAGE_DIR_BASENAME="$(basename ${STAGE_DIR})"
    local PRETRANSFER_PATH="${CURRENT_TEST_DIR}/${STAGE_DIR_BASENAME}/pretransfer"
    local EXPECTED_PATH="${CURRENT_TEST_DIR}/${STAGE_DIR_BASENAME}/expected"
    local RULESDIR_PATH="${LANG_PAIR_DIR}/code/${STAGE_DIR_BASENAME}"

    echo "Writing test to ${CURRENT_TEST_DIR}/${STAGE_DIR_BASENAME}."
    create_empty_dir "${CURRENT_TEST_DIR}/${STAGE_DIR_BASENAME}"

    if [ -z "${LAST_STAGE_DIR}" ]; then
      generate_${STAGE_DIR_BASENAME}_pretransfer \
        "${TEXTFILE_PATH}" "${PRETRANSFER_PATH}" "${LANG_DATA_DIR}"
      generate_${STAGE_DIR_BASENAME}_expected \
        "${PRETRANSFER_PATH}" "${RULESDIR_PATH}" "${EXPECTED_PATH}"
    else
      cp "${LAST_EXPECTED_PATH}" "${PRETRANSFER_PATH}"
      generate_${LAST_STAGE_DIR_BASENAME}_to_${STAGE_DIR_BASENAME}_expected \
        "${PRETRANSFER_PATH}" "${RULESDIR_PATH}" "${EXPECTED_PATH}"
    fi

    LAST_STAGE_DIR=${STAGE_DIR}
    LAST_STAGE_DIR_BASENAME=${STAGE_DIR_BASENAME}
    LAST_EXPECTED_PATH=${EXPECTED_PATH}
  done
}

function build_tests_for_lang_pair() {
  local LANG_PAIR_DIR="${1}"
  local LANG_PAIR_CONFIG="${LANG_PAIR_DIR}/${CONFIG_FILE}"
  local LANG_PAIR_TESTS_DIR="${LANG_PAIR_DIR}/tests"

  create_empty_dir "${LANG_PAIR_TESTS_DIR}"
  load_lang_pair_config "${LANG_PAIR_CONFIG}"

  find_lang_pair_txt_files "${LANG_PAIR_DIR}" |\
  while read TEXTFILE_PATH; do
    local TEXTFILE_BASENAME="$(basename ${TEXTFILE_PATH})"
    local CURRENT_TEST_DIR="${LANG_PAIR_TESTS_DIR}/${TEXTFILE_BASENAME}"

    create_empty_dir "${CURRENT_TEST_DIR}"
    build_tests_for_all_stages "${LANG_PAIR_DIR}" "${CURRENT_TEST_DIR}" "${TEXTFILE_PATH}"
  done
}

function action_gen() {
  echo "Building tests."

  find_lang_pairs |\
  while read LANG_PAIR_DIR; do
    build_tests_for_lang_pair "${LANG_PAIR_DIR}"
  done
}

function check_params() {
  echo "$# -> $@"
}

# Runs all tests on a single language pair.
function run_single_pair() {
  local LANG_PAIR_BASENAME="${1}"
  if [ ! -d "${TESTFILES_DIR}/${LANG_PAIR_BASENAME}/tests" ]; then
    echo "No tests for language pair ${LANG_PAIR_BASENAME}."
    return
  fi
  find "${TESTFILES_DIR}/${LANG_PAIR_BASENAME}/tests" \
    -mindepth 1 -maxdepth 1 -type d -exec basename {} \; |\
  sort |\
  while read TEST_DIR_BASENAME; do
    run_single_pair_single_test "${LANG_PAIR_BASENAME}" "${TEST_DIR_BASENAME}"
  done
}

# Runs a single test from a language pair.
function run_single_pair_single_test() {
  local LANG_PAIR_BASENAME="${1}"
  local TEST_DIR_BASENAME="${2}"
  find "${TESTFILES_DIR}/${LANG_PAIR_BASENAME}/code" \
    -mindepth 1 -maxdepth 1 -type d -exec basename {} \; |\
  sort |\
  while read STAGE_NAME; do
    run_single_pair_single_test_single_stage \
      "${LANG_PAIR_BASENAME}" "${TEST_DIR_BASENAME}" "${STAGE_NAME}"
  done
}

# Runs a single stage of a single test of a single language pair.
function run_single_pair_single_test_single_stage() {
  local LANG_PAIR_BASENAME="${1}"
  local TEST_DIR_BASENAME="${2}"
  local STAGE_NAME="${3}"

  local TEST_DESCRIPTION=$(printf "%-10s %-10s %-10s\n" \
    "${LANG_PAIR_BASENAME}" \
    "${TEST_DIR_BASENAME}" \
    "${STAGE_NAME}")

  local CURRENT_TEST_DIR="${TESTFILES_DIR}/${LANG_PAIR_BASENAME}/tests/${TEST_DIR_BASENAME}/${STAGE_NAME}"

  local CURRENT_TEST_TAGS_PATH="${CURRENT_TEST_DIR}/tags"

  if [ "${TEST_TAG}" != "" ]; then
    if [ -f "${CURRENT_TEST_TAGS_PATH}" ]; then
      if [ -z $(grep "^$TEST_TAG\$" "${CURRENT_TEST_TAGS_PATH}") ]; then
        return
      fi
    else
      return
    fi
  fi
  if [ ${JUST_LIST_TESTS_COMBINATIONS} -eq 1 ]; then
    echo "${TEST_DESCRIPTION}"
    return
  fi

  local CURRENT_STAGE_CODE_DIR="${TESTFILES_DIR}/${LANG_PAIR_BASENAME}/code/${STAGE_NAME}"

  # FIXME(asfrent): load only once for a certain langage pair.
  source "${TESTFILES_DIR}/${LANG_PAIR_BASENAME}/${CONFIG_FILE}"

  local PRETRANSFER_PATH="${CURRENT_TEST_DIR}/pretransfer"
  local RULESVM_PATH="${CURRENT_STAGE_CODE_DIR}/rules.vm"
  local VMPREFIX_PATH="${CURRENT_TEST_DIR}/vm"
  local EXPECTED_PATH="${CURRENT_TEST_DIR}/expected"

  rm -f "${VMPREFIX_PATH}.*"
  execute_and_time_test "${PRETRANSFER_PATH}" "${RULESVM_PATH}" "${VMPREFIX_PATH}"
  ${VALIDATE_TEST_FN} "${CURRENT_TEST_DIR}" "${VMPREFIX_PATH}" "${EXPECTED_PATH}"
  pretty_print "${TEST_DESCRIPTION}" "${TEST_RESULT}" "${TEST_DURATION}"
}

function pretty_print()
{
    local TEST_DESCRIPTION="${1}"
    local TEST_RESULT="${2}"
    local TEST_DURATION="${3}"

    local readonly COLOR_RED='\e[1;31m';
    local readonly COLOR_GREEN='\e[1;32m';
    local readonly COLOR_YELLOW='\e[1;33m';
    local readonly COLOR_END='\e[0m';

    local readonly PADLENGTH=54
    local readonly PADDING=`printf '%0.1s' "."{1..80}`

    if [ ${USE_COLORS} -eq 1 ]; then
        local readonly PASS_PATTERN="[${COLOR_GREEN}PASS${COLOR_END}]"
        local readonly FAIL_PATTERN="[${COLOR_RED}FAIL${COLOR_END}]"
        local readonly NONE_PATTERN="[${COLOR_YELLOW}NONE${COLOR_END}]"
    else
        local readonly PASS_PATTERN="[PASS]"
        local readonly FAIL_PATTERN="[FAIL]"
        local readonly NONE_PATTERN="[NONE]"
    fi

    printf "%s" "${TEST_DESCRIPTION}"
    printf "%*.*s" 0 $((PADLENGTH - ${#TEST_DESCRIPTION})) ${PADDING}
    case ${TEST_RESULT} in
        "pass")
            printf "${PASS_PATTERN}"
            ;;
        "fail")
            printf "${FAIL_PATTERN}"
            ;;
        "none")
            printf "${NONE_PATTERN}"
            ;;
    esac

    local SECOND_PART=$((${TEST_DURATION}/1000))
    local MILLISECOND_PART=$((${TEST_DURATION}%1000))

    printf " [%3d.%03ds]" ${SECOND_PART} ${MILLISECOND_PART}
    printf "\n"
}

function validate_output() {
  local CURRENT_TEST_DIR="${1}"
  local VMPREFIX_PATH="${2}"
  local EXPECTED_PATH="${3}"

  TEST_RESULT="fail"

  diff "${VMPREFIX_PATH}.out" "${EXPECTED_PATH}" \
    1> "${VMPREFIX_PATH}.diff.out" \
    2> "${VMPREFIX_PATH}.diff.err"

  if [ $? -eq 0 ]; then
    TEST_RESULT="pass"
  fi
}

function validate_memcheck() {
  local CURRENT_TEST_DIR="${1}"

  local MEMCHECK_ERROR_COUNT=$(\
    cat "${CURRENT_TEST_DIR}/${VALGRIND_MEMCHECK_OUT}" |\
    grep "<error>" |\
    wc -l)

  if [ ${MEMCHECK_ERROR_COUNT} -eq 0 ]; then
    TEST_RESULT="pass"
  else
    TEST_RESULT="fail"
  fi
}

function validate_callgrind() {
  TEST_RESULT="none"
}

# Sets the variable TEST_DURATION
function execute_and_time_test() {
  local PRETRANSFER_PATH="${1}"
  local RULESVM_PATH="${2}"
  local VMPREFIX_PATH="${3}"

  local VMOUT_PATH="${VMPREFIX_PATH}.out"
  local VMERR_PATH="${VMPREFIX_PATH}.err"

  rm -f "${VMOUT_PATH}" "${VMERR_PATH}"

  if using_valgrind; then
    local VALGRIND_OUT_PATH="${CURRENT_TEST_DIR}/${VALGRIND_OUT}"
  else
    local VALGRIND_OUT_PATH=""
  fi

  local T_START="$(date +%s%N)"
  cat "${PRETRANSFER_PATH}" |\
    ${VALGRIND_PREFIX}${VALGRIND_OUT_PATH} \
      apertium-xfervm -c "${RULESVM_PATH}" > "${VMOUT_PATH}" 2> "${VMERR_PATH}"
  local T_CURRENT="$(date +%s%N)"

  TEST_DURATION=$(((T_CURRENT-T_START)/1000000))
}

function using_valgrind() {
  if [ -z "${VALGRIND_PREFIX}" ]; then
    return 1
  else
    return 0
  fi
}

function action_memcheck() {
  echo "Running tests under valgrind with memcheck tool."
  VALGRIND_PREFIX="valgrind -q --tool=memcheck --xml=yes --xml-file="
  VALGRIND_OUT=${VALGRIND_MEMCHECK_OUT}
  VALIDATE_TEST_FN="validate_memcheck"
  run_tests "$@"
}

function action_callgrind() {
  echo "Running tests under valgrind with callgrind tool."
  VALGRIND_PREFIX="valgrind -q --tool=callgrind --callgrind-out-file="
  VALGRIND_OUT=${VALGRIND_CALLGRIND_OUT}
  VALIDATE_TEST_FN="validate_callgrind"
  run_tests "$@"
}

function action_run() {
  echo "Running normal tests."
  VALGRIND_PREFIX=""
  VALGRIND_OUT=""
  VALIDATE_TEST_FN="validate_output"
  run_tests "$@"
}

# Runs tests for all language pairs.
function run_all() {
  find ${TESTFILES_DIR} -mindepth 1 -maxdepth 1 -type d -exec basename {} \; |\
  while read LANG_PAIR_BASENAME; do
    run_single_pair "${LANG_PAIR_BASENAME}"
  done
}

# VALIDATE_TEST_FN must be set before calling this function.
function run_tests() {
  if [ $# -eq 0 ]; then
    run_all
  elif [ $# -eq 1 ]; then
    run_single_pair "$@"
  elif [ $# -eq 2 ]; then
    run_single_pair_single_test "$@"
  elif [ $# -eq 3 ]; then
    run_single_pair_single_test_single_stage "$@"
  else
    echo "Too many arguments. Way too many. Can't handle that many. Not cool. Not cool, man..."
    exit -1
  fi
}

function action_rm() {
  find ${TESTFILES_DIR} -mindepth 2 -maxdepth 2 -type d -name 'tests' -exec rm -r {} \;
  echo "Removed tests."
}

function action_ls() {
  echo "Available tests:"
  JUST_LIST_TESTS_COMBINATIONS=1
  run_tests "$@"
}

function action_full() {
  echo "Performing full testing, this might take a while."
  action_ls

  JUST_LIST_TESTS_COMBINATIONS=0
  action_run
  action_memcheck
  action_callgrind
}

function action_clean() {
  find _testfiles/ \
    -mindepth 5 -maxdepth 5 \
    -not -path "*/pretransfer" \
    -not -path "*/expected" \
    -exec rm -rf {} \;
  echo "Cleaned tests."
}

function action_help() {
  echo "Usage:"
  echo "  ./tests action action-params"
  echo "Available actions:"
  echo "  * rm - remove all tests."
  echo "  * gen - generate all tests."
  echo "  * ls - list all available tests."
  echo "  * run [lang_pair [test_name [stage]]] - run tests."
  echo "  * memcheck [lang_pair [test_name [stage]]] - run valgrind with memcheck tool."
  echo "  * callgrind [lang_pair [test_name [stage]]] - run valgrind with callgrind tool."
  echo "  * full - clean, generate and run all tests in all possible modes."
  echo "  * help - displays this text."
}

function test_script_main() {
  TEST_TAG=""
  if [ $# -eq 0 ]; then
    echo "No action specified."
    action_help
  else
    if [ "${1}" = "--tag" ] || [ "${1}" = "-t" ]; then
      if [ $# -le 2 ]; then
        echo "No action specified."
        action_help
      else
        TEST_TAG="${2}"
        shift
        shift
      fi
    fi
    local TEST_SCRIPT_ACTION="${1}"
    shift
    action_${TEST_SCRIPT_ACTION} "$@"
  fi
}

test_script_main "$@"
