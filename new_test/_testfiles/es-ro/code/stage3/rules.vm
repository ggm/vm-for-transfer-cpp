#<assembly>
#<postchunk>
jmp section_rules_start
macro_f_bcond_start:
pushsb 1
push-str  
cmp
not
jz when_0_end
pushsb 1
out 1
jmp choose_0_end
when_0_end:
choose_0_end:
macro_f_bcond_end: ret
section_rules_start:
patterns_start:
push-str qui
push-int 1
addtrie action_0_start
push-str <rel>
store-lp 0
push-str <m>|<f>|<mf>|<GD>|<nt>
store-lp 1
push-str <sg>|<pl>|<sp>|<ND>
store-lp 2
push-str cifra
push-int 1
addtrie action_1_start
push-str lem
store-lp 3
push-str <num>
store-lp 4
patterns_end:
action_0_start:
push-str qui
push-int 1
push-int 0
clip
push-int 1
push-int 1
clip
push-int 1
push-int 2
clip
lu 4
out 1
action_0_end:
action_1_start:
push-int 1
push-int 3
clip
push-int 1
push-int 4
clip
lu 2
out 1
action_1_end:
section_rules_end:
