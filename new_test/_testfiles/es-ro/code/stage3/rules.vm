#<assembly>
#<postchunk>
jmp section_rules_start
macro_f_bcond_start:
pushsb 1
push " "
cmp
not
jz when_0_end
pushsb 1
out 1
jmp choose_0_end
when_0_end:
choose_0_end:
macro_f_bcond_end: ret
section_rules_start:
patterns_start:
push-str qui
push-int 1
addtrie action_0_start
push-str cifra
push-int 1
addtrie action_1_start
patterns_end:
action_0_start:
push "qui"
push-int 1
push "<rel>"
clip
push-int 1
push "<m>|<f>|<mf>|<GD>|<nt>"
clip
push-int 1
push "<sg>|<pl>|<sp>|<ND>"
clip
lu 4
out 1
action_0_end:
action_1_start:
push-int 1
push "lem"
clip
push-int 1
push "<num>"
clip
lu 2
out 1
action_1_end:
section_rules_end:
