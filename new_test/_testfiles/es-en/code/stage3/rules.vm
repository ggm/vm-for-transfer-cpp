#<assembly>
#<postchunk>
jmp section_rules_start
section_rules_start:
patterns_start:
push-str haver_pp|haver_pp_enc
push-int 1
addtrie action_0_start
push-str aux_verb
push-int 1
addtrie action_1_start
push-str aux_haver_pp|aux_haver_pp_enc
push-int 1
addtrie action_2_start
push-str verbcj|verbcj_enc
push-int 1
addtrie action_3_start
push-str subj
push-int 1
addtrie action_4_start
push-str haverhi
push-int 1
addtrie action_5_start
push-str haverhi_pp
push-int 1
addtrie action_6_start
patterns_end:
action_0_start:
push-int 0
push-str <SVneg>|<SV>
clip
push-str <SVneg>
cmp
jz when_0_end
push-int 1
push-str whole
clip
lu 1
pushsb 1
push-str not
push-str <adv>
lu 2
pushbl
push-int 2
push-str whole
clip
lu 1
out 5
jmp choose_0_end
when_0_end:
push-int 1
push-str whole
clip
lu 1
pushsb 1
push-int 2
push-str whole
clip
lu 1
out 3
choose_0_end:
action_0_end:
action_1_start:
push-int 0
push-str <SVneg>|<SV>
clip
push-str <SVneg>
cmp
jz when_1_end
push-int 1
push-str whole
clip
lu 1
pushsb 1
push-str not
push-str <adv>
lu 2
pushbl
push-int 2
push-str whole
clip
lu 1
out 5
jmp choose_1_end
when_1_end:
push-int 1
push-str whole
clip
lu 1
pushsb 1
push-int 2
push-str whole
clip
lu 1
out 3
choose_1_end:
action_1_end:
action_2_start:
push-int 0
push-str <SVneg>|<SV>
clip
push-str <SVneg>
cmp
jz when_2_end
push-int 1
push-str whole
clip
lu 1
pushsb 1
push-str not
push-str <adv>
lu 2
pushsb 2
push-int 2
push-str whole
clip
lu 1
pushbl
push-int 3
push-str whole
clip
lu 1
out 7
jmp choose_2_end
when_2_end:
push-int 1
push-str whole
clip
lu 1
pushsb 1
push-int 2
push-str whole
clip
lu 1
pushsb 2
push-int 3
push-str whole
clip
lu 1
out 5
choose_2_end:
action_2_end:
action_3_start:
push-int 1
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
clip
push-str <pri>
cmp
push-int 1
push-str <p1><sg>|<p1><pl>|<p2><sg>|<p2><pl>|<p2><sp>|<p3><sg>|<p3><pl>
clip
push-str <p3><sg>
cmp
push-int 1
push-str <p1><sg>|<p1><pl>|<p2><sg>|<p2><pl>|<p2><sp>|<p3><sg>|<p3><pl>
clip
push-str <p1><sg>
cmp
or 2
not
and 2
jz when_3_end
push-int 1
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
push-str <pres>
storecl
push-int 1
push-str <p1><sg>|<p1><pl>|<p2><sg>|<p2><pl>|<p2><sp>|<p3><sg>|<p3><pl>
push-str 
storecl
jmp choose_3_end
when_3_end:
choose_3_end:
push-int 1
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
clip
push-str <past>
cmp
push-int 1
push-str <p1><sg>|<p1><pl>|<p2><sg>|<p2><pl>|<p2><sp>|<p3><sg>|<p3><pl>
clip
push-str <p3><sg>
cmp
push-int 1
push-str <p1><sg>|<p1><pl>|<p2><sg>|<p2><pl>|<p2><sp>|<p3><sg>|<p3><pl>
clip
push-str <p1><sg>
cmp
or 2
not
and 2
jz when_4_end
push-int 1
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
push-str <past>
storecl
push-int 1
push-str <p1><sg>|<p1><pl>|<p2><sg>|<p2><pl>|<p2><sp>|<p3><sg>|<p3><pl>
push-str 
storecl
jmp choose_4_end
when_4_end:
choose_4_end:
push-int 1
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
clip
push-str <pii>
cmp
jz when_5_end
push-int 1
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
push-str <past>
storecl
push-int 1
push-str <p1><sg>|<p1><pl>|<p2><sg>|<p2><pl>|<p2><sp>|<p3><sg>|<p3><pl>
push-str 
storecl
jmp choose_5_end
when_5_end:
choose_5_end:
push-int 0
push-str <SVneg>|<SV>
clip
push-str <SVneg>
cmp
jz when_6_end
push-int 0
push-str <vblex>|<vbser>|<vbhaver>|<vbmod>|<vaux>
clip
push-str <vbser>
cmp
push-int 0
push-str <vblex>|<vbser>|<vbhaver>|<vbmod>|<vaux>
clip
push-str <vaux>
cmp
or 2
jz when_7_end
push-int 1
push-str whole
clip
lu 1
pushbl
push-str not
push-str <adv>
lu 2
out 3
jmp choose_7_end
when_7_end:
push-int 0
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
clip
push-str <pri>
cmp
push-int 0
push-str <p1>|<p2>|<p3>|<PD>
clip
push-str <p3>
cmp
push-int 0
push-str <sg>|<pl>|<sp>|<ND>
clip
push-str <sg>
cmp
and 3
jz when_8_end
push-str temps_aux
push-str <pri><p3><sg>
storev
push-int 1
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
push-str <inf>
storecl
push-int 1
push-str <p1>|<p2>|<p3>|<PD>
push-str 
storecl
push-int 1
push-str <sg>|<pl>|<sp>|<ND>
push-str 
storecl
jmp choose_8_end
when_8_end:
push-int 0
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
clip
push-str <pri>
cmp
push-int 0
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
clip
push-str <prs>
cmp
push-int 0
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
clip
push-str <imp>
cmp
or 3
jz when_9_end
push-str temps_aux
push-str <pres>
storev
jmp choose_8_end
when_9_end:
push-int 0
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
clip
push-str <cni>
cmp
push-int 0
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
clip
push-str <ifi>
cmp
push-int 0
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
clip
push-str <pii>
cmp
push-int 0
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
clip
push-str <pis>
cmp
push-int 0
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
clip
push-str <past>
cmp
or 5
jz when_10_end
push-str temps_aux
push-str <past>
storev
push-int 1
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
push-str <inf>
storecl
jmp choose_8_end
when_10_end:
choose_8_end:
push-str do
push-int 1
get-case-from
modify-case
push-str <vbdo>
push-var temps_aux
lu 3
pushbl
push-str not
push-str <adv>
lu 2
pushbl
out 4
push-int 1
push-str lem
clip
case-of
push-str Aa
cmp
jz when_11_end
push-int 1
push-str lem
push-int 1
push-str lem
clip
push-str aa
modify-case
storecl
jmp choose_9_end
when_11_end:
choose_9_end:
push-int 1
push-str whole
clip
lu 1
out 1
choose_7_end:
jmp choose_6_end
when_6_end:
push-int 1
push-str whole
clip
lu 1
out 1
choose_6_end:
action_3_end:
action_4_start:
push-int 1
push-str <p1>|<p2>|<p3>|<PD>
clip
push-str <p3>
cmp
push-int 1
push-str <sg>|<pl>|<sp>|<ND>
clip
push-str <sg>
cmp
and 2
jz when_12_end
push-int 1
push-str <m>|<f>|<mf>|<GD>|<nt>
push-str <nt>
storecl
jmp choose_10_end
when_12_end:
push-int 1
push-str <p1>|<p2>|<p3>|<PD>
clip
push-str <p2>
cmp
jz when_13_end
push-int 1
push-str <sg>|<pl>|<sp>|<ND>
push-str <sp>
storecl
push-int 1
push-str <m>|<f>|<mf>|<GD>|<nt>
push-str <mf>
storecl
jmp choose_10_end
when_13_end:
push-int 1
push-str <m>|<f>|<mf>|<GD>|<nt>
push-str <mf>
storecl
choose_10_end:
push-int 1
push-str whole
clip
lu 1
out 1
action_4_end:
action_5_start:
push-int 0
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
clip
push-str <pri>
cmp
push-int 0
push-str <sg>|<pl>|<sp>|<ND>
clip
push-str <pl>
cmp
and 2
jz when_14_end
push-int 1
push-str whole
clip
lu 1
pushsb 1
push-int 2
push-str lem
clip
push-int 2
push-str <vblex>|<vbser>|<vbhaver>|<vbmod>|<vaux>
clip
push-str <pres>
lu 3
out 3
jmp choose_11_end
when_14_end:
push-int 0
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
clip
push-str <past>
cmp
push-int 0
push-str <sg>|<pl>|<sp>|<ND>
clip
push-str <pl>
cmp
and 2
jz when_15_end
push-int 1
push-str whole
clip
lu 1
pushsb 1
push-int 2
push-str lem
clip
push-int 2
push-str <vblex>|<vbser>|<vbhaver>|<vbmod>|<vaux>
clip
push-int 2
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
clip
lu 3
out 3
jmp choose_11_end
when_15_end:
push-int 1
push-str whole
clip
lu 1
pushsb 1
push-int 2
push-str whole
clip
lu 1
out 3
choose_11_end:
push-int 0
push-str <SVneg>|<SV>
clip
push-str <SVneg>
cmp
jz when_16_end
pushbl
push-str not
push-str <adv>
lu 2
out 2
jmp choose_12_end
when_16_end:
choose_12_end:
push-int 0
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
clip
push-str <cni>
cmp
push-int 0
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
clip
push-str <fti>
cmp
or 2
jz when_17_end
pushsb 2
push-int 3
push-str whole
clip
lu 1
out 2
jmp choose_13_end
when_17_end:
choose_13_end:
action_5_end:
action_6_start:
push-int 0
push-str <sg>|<pl>|<sp>|<ND>
clip
push-str <pl>
cmp
push-int 0
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
clip
push-str <pri>
cmp
and 2
jz when_18_end
push-int 1
push-str whole
clip
lu 1
pushsb 1
push-int 2
push-str lem
clip
push-int 2
push-str <vblex>|<vbser>|<vbhaver>|<vbmod>|<vaux>
clip
push-str <pres>
lu 3
pushsb 2
out 4
jmp choose_14_end
when_18_end:
push-int 0
push-str <sg>|<pl>|<sp>|<ND>
clip
push-str <pl>
cmp
push-int 0
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
clip
push-str <past>
cmp
and 2
jz when_19_end
push-int 1
push-str whole
clip
lu 1
pushsb 1
push-int 2
push-str lem
clip
push-int 2
push-str <vblex>|<vbser>|<vbhaver>|<vbmod>|<vaux>
clip
push-int 2
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
clip
lu 3
pushsb 2
out 4
jmp choose_14_end
when_19_end:
push-int 1
push-str whole
clip
lu 1
pushsb 1
push-int 2
push-str whole
clip
lu 1
pushsb 2
out 4
choose_14_end:
push-int 0
push-str <SVneg>|<SV>
clip
push-str <SVneg>
cmp
jz when_20_end
push-str not
push-str <adv>
lu 2
pushbl
out 2
jmp choose_15_end
when_20_end:
choose_15_end:
push-int 3
push-str whole
clip
lu 1
out 1
push-int 0
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
clip
push-str <cni>
cmp
push-int 0
push-str <inf>|<pres>|<past>|<pri>|<prs>|<imp>|<pii>|<cni>|<ifi>|<pis>|<pp>|<ger>|<pprs>|<subs>|<fti>
clip
push-str <fti>
cmp
or 2
jz when_21_end
pushsb 3
push-int 4
push-str whole
clip
lu 1
out 2
jmp choose_16_end
when_21_end:
choose_16_end:
action_6_end:
section_rules_end:
