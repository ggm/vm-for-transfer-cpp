== About the project ==

This project is part of the free/open-source platform for developing rule-based
machine translation systems, Apertium. And was developed as part of the Google
Summer of Code 2011.

The aim of the project is to create a simple compiler and VM for the transfer
files of Apertium.

== Requirements ==

 - libxml2 (same used by Apertium, you may have it already installed).
 - lttoolbox (again also used by Apertium).

== Compilation ==

You can use the Makefile to compile the compiler, the vm or both.

 > make compiler;
 > make vm;
 > make; (both)

'apertium-transfervm-compiler' and 'apertium-transfervm' binaries will be created.

== Execution ==

=== Options ===

To see the options of each module you can run one of the binaries with the -h
flag to see the help of the module, with the explanation of the different
options.

=== Compiler ===

To run the compiler you only need a t?x file as input and the compiler will
generate its assembly representation. For example:

 > ./apertium-transfervm-compiler -i test/data/apertium-en-ca.en-ca.t1x -o output.v1x

You can also use stdin and stdout as input and output, for example:

 > cat test/data/apertium-en-ca.en-ca.t1x | ./apertium-transfervm-compiler > output.v1x

Finally, if you want to generate debug information, like comments for some of the
assembly instruction, you can use the -d flag:

 > ./apertium-transfervm-compiler -i test/data/test_macro_2.t1x -d compiler.log

=== VM ===

The VM can run code generated by the compiler, for now, you can use the -c option
to set the code to run and the VM, automatically, will detect from which transfer
stage it is and will run it accordingly. For example:

 > ./apertium-transfervm -c code_file -i input_file -o output_file

 > ./apertium-transfervm -c test/expected_output/compiler/apertium-en-ca.en-ca.v1x
   -i test/input/chunker/rule_all_nounplural

You can also use stdin and stdout as input and output, for example:

 > cat input_file | ./apertium-transfervm -c code_file > output_file

And using this last option, you can use piping to run an input file through all
the stages of the advanced transfer, for example:

 > cat input_file | ./apertium-transfervm -c chunker_code | ./apertium-transfervm -c
   interchunk_code | ./apertium-transfervm -c postchunk_code

NOTE: The input used by the vm is the generated by the -b option of lt-proc, you
can find some example inputs in the tests/input folders for each transfer stage.

 - input_file: you can find some in test/input/<transfer stage>
 - code_file: you can find some in test/expected_output/compiler

== Tests ==

You can run some simple tests for the compiler with the script
run-tests-compiler.sh and some for the VM with the script run-tests-vm.sh. Both
found in the test folder.
